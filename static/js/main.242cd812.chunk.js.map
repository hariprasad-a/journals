{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Styles","styled","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","e","target","placeholder","style","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","Table","columns","data","filterTypes","text","rows","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","class","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","colSpan","textAlign","getRowProps","cells","cell","getCellProps","JSON","stringify","filters","App","Header","accessor","require","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.242cd812.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = React.useState(globalFilter)\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: '1.1rem',\n          border: '0',\n        }}\n      />\n    </span>\n  )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id])\n    })\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={e => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\n// // This is a custom filter UI that uses a\n// // slider to set the filter value between a column's\n// // min and max values\n// function SliderColumnFilter({\n//   column: { filterValue, setFilter, preFilteredRows, id },\n// }) {\n//   // Calculate the min and max\n//   // using the preFilteredRows\n\n//   const [min, max] = React.useMemo(() => {\n//     let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n//     let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n//     preFilteredRows.forEach(row => {\n//       min = Math.min(row.values[id], min)\n//       max = Math.max(row.values[id], max)\n//     })\n//     return [min, max]\n//   }, [id, preFilteredRows])\n\n//   return (\n//     <>\n//       <input\n//         type=\"range\"\n//         min={min}\n//         max={max}\n//         value={filterValue || min}\n//         onChange={e => {\n//           setFilter(parseInt(e.target.value, 10))\n//         }}\n//       />\n//       <button onClick={() => setFilter(undefined)}>Off</button>\n//     </>\n//   )\n// }\n\n// // This is a custom UI for our 'between' or number range\n// // filter. It uses two number boxes and filters rows to\n// // ones that have values between the two\n// function NumberRangeColumnFilter({\n//   column: { filterValue = [], preFilteredRows, setFilter, id },\n// }) {\n//   const [min, max] = React.useMemo(() => {\n//     let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n//     let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n//     preFilteredRows.forEach(row => {\n//       min = Math.min(row.values[id], min)\n//       max = Math.max(row.values[id], max)\n//     })\n//     return [min, max]\n//   }, [id, preFilteredRows])\n\n//   return (\n//     <div\n//       style={{\n//         display: 'flex',\n//       }}\n//     >\n//       <input\n//         value={filterValue[0] || ''}\n//         type=\"number\"\n//         onChange={e => {\n//           const val = e.target.value\n//           setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n//         }}\n//         placeholder={`Min (${min})`}\n//         style={{\n//           width: '70px',\n//           marginRight: '0.5rem',\n//         }}\n//       />\n//       to\n//       <input\n//         value={filterValue[1] || ''}\n//         type=\"number\"\n//         onChange={e => {\n//           const val = e.target.value\n//           setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n//         }}\n//         placeholder={`Max (${max})`}\n//         style={{\n//           width: '70px',\n//           marginLeft: '0.5rem',\n//         }}\n//       />\n//     </div>\n//   )\n// }\n\n\n// Our table component\nfunction Table({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters, // useFilters!\n    useGlobalFilter // useGlobalFilter!\n  )\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 500)\n\n  return (\n    <>\n      <table class=\"fixed\" {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n          <tr>\n            <th\n              colSpan={visibleColumns.length}\n              style={{\n                textAlign: 'left',\n              }}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div>Showing the first 500 results of {rows.length} rows</div>\n      <div>\n        <pre>\n          <code>{JSON.stringify(state.filters, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue >= filterValue\n  })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\n\nfunction App() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Journals',\n        columns: [\n          {\n            Header: 'Title',\n            accessor: 'Title',\n          },\n          {\n            Header: 'Publisher',\n            accessor: 'Publisher',\n          },        \n          {\n            Header: 'ABDC Ranking',\n            accessor: 'ABDC ranking',\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n          },\n          {\n            Header: 'Scopus listed',\n            accessor: 'Is Scopus listed',\n            Filter: SelectColumnFilter,\n            filter: 'includes',\n          },\n        ],\n      },\n    ],\n    []\n  )\n\n  const data = React.useMemo(() => require('./data.json'), [])\n\n  return (\n    <Styles>\n      <Table columns={columns} data={data} />\n    </Styles>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}